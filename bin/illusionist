#!/usr/bin/env node

// jshint latedef:false

var fs = require('fs');
var path = require('path');
var basename = path.basename;
var join = path.join;
var relative = path.relative;
var dirname = path.dirname;

require('colors');
var mkdirp = require('mkdirp');
var glob = require('glob');

var illusionist = require('../lib/illusionist');

function Executable(argv) {
  this.readFromStdIn = false;
  this.writeToStdOut = false;
  this.outputToTree = false;

  this.paths = [];
  this.destination = '';
  this.watchers = null;

  this.compilationOptions = {
    basePath: '',
    moduleName: '',
    fileName: ''
  };

  this.setOptionsForArguments(argv);
  var error = this.validateOptions();
  if (error) {
    console.error(String(error).red);
    process.exit(1);
  }
}

Executable.prototype = {
  getUsage: function() {
    console.log([
      '',
      '  Usage: illusionist [options] [< in [> out]]',
      '                     [file|dir ...]',
      '',
      '  Options:',
      '',
      '    -h, --help         Display help information',
      '    -m, --module-name  Module name (this option works only with stdin)',
      '    -o, --out <dir>    Output to <dir> when passing files',
      '    -t, --tree         Output a parallel directory tree in <dir>',
      '    -v, --version      Display the version of Illusionist',
      '    -w, --watch        Watch file(s) for changes and re-compile',
      ''
    ].join('\n'));
  },

  setOptionsForArguments: function(argv) {
    var argument;

    while (argv.length) {
      argument = argv.shift();

      switch (argument) {
      case '-h':
      case '--help':
        this.printUsage();
        process.exit(1);
        break;

      case '-v':
      case '--version':
        console.log(illusionist.version);
        process.exit(0);
        break;

      case '-m':
      case '--module-name':
        this.compilationOptions.moduleName = argv.shift();
        break;

      case '-o':
      case '--out':
        this.destination = argv.shift();
        break;

      case '-t':
      case '--tree':
        this.outputToTree = true;
        break;

      case '-w':
      case '--watch':
        this.watchers = {};
        break;

      default:
        this.paths.push(argument);
      }
    }

    if (!this.paths.length) this.readFromStdIn = true;
    if (!this.destination) this.writeToStdOut = true;
    if (this.outputToTree) this.compilationOptions.basePath = this.paths[0];
  },

  validateOptions: function() {
    if (this.outputToTree && this.paths.length > 1) return '  --tree option requires only 1 input directory';
    if (!this.readFromStdIn && !fs.lstatSync(this.paths[0]).isDirectory()) return '  ' + this.paths[0] + ' is not a directory';
  },

  run: function() {
    if (this.readFromStdIn) {
      this.compileFile();

    } else {
      var paths = this.getPaths();
      paths = this.getUniqueJSFilePaths(paths);
      paths.forEach(this.compileFile.bind(this));

      if (this.watchers) {
        var self = this;
        var boundCompileFileFunction = this.compileFile.bind(this);
        paths.forEach(function(path) {
          self.watchFile(path, boundCompileFileFunction);
        });
      }
    }
  },

  getPaths: function() {
    var paths;

    if (this.compilationOptions.basePath) {
      paths = glob.sync(join(this.compilationOptions.basePath, '**', '*.js'));

    } else {
      paths = this.paths;
      paths.forEach(function(path, index) {
        if (fs.lstatSync(path).isDirectory()) {
          var files = fs.readdirSync(path);
          files = files.map(function(file) {
            return join(path, file);
          });
          paths.splice.apply(paths, [index, 1].concat(files));
        }
      });
    }

    return paths;
  },

  getUniqueJSFilePaths: function(paths) {
    var jsRegexp = /\.js$/;
    return paths.reduce(function(newPaths, path) {
      if (jsRegexp.test(path) && newPaths.indexOf(path) == -1) newPaths.push(path);
      return newPaths;
    }, []);
  },

  compileFile: function(path) {
    this.getFileContent(path, function(path, error, content) {
      if (error) console.error(String(error).red);
      this.compilationOptions.fileName = path ? path : 'stdin';
      var js = illusionist(content, this.compilationOptions).render();
      this.writeFile(js, this.compilationOptions);
    }.bind(this, path));
  },

  getFileContent: function(path, callback) {
    if (!path) {
      process.stdin.setEncoding('utf8');

      var buffer = '';
      process.stdin.on('data', function(chunk) {
        buffer += chunk;
      });

      process.stdin.on('end', function() {
        callback(null, buffer);
      }).resume();

    } else {
      fs.readFile(path, 'utf8', callback);
    }
  },

  writeFile: function(js, options) {
    if (this.writeToStdOut) return process.stdout.write(js);

    var path;

    if (options.basePath) {
      var relativePath = relative(options.basePath, options.fileName);
      path = join(this.destination, relativePath);

    } else {
      path = join(this.destination, basename(options.fileName));
    }

    mkdirp.sync(dirname(path));

    fs.writeFileSync(path, js);
    console.log('  Compiled'.grey, path);
  },

  watchFile: function(path, fn) {
    if (!this.watchers) return;
    if (this.watchers[path]) return;

    this.watchers[path] = true;
    console.log('  Watching'.grey, path);

    fs.watchFile(path, {interval: 300}, function(current, previous) {
      if (current.mtime > previous.mtime) fn(path);
    });
  }
};

var executable = new Executable(process.argv.slice(2));
executable.run();
